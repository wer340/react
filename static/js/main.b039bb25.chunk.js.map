{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.component.jsx","component/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","window","location","origin","Monstering","id","name","email","CardList","Love","map","item","key","SearchBox","placeHolder","handleSearchBox","type","placeholder","onChange","App","handleChange","e","setState","serachField","target","value","state","message","monsters","fetch","then","data","json","this","filterMonster","filter","toLowerCase","includes","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mUAMaA,G,kBAAM,SAAAC,GACnB,OAAO,yBAAKC,UAAU,kBAGpB,yBAAKC,IAAI,SAASC,IAAKC,OAAOC,SAASC,OAAhB,uBAAwCN,EAAMO,WAAWC,GAAzD,UACzB,4BAAKR,EAAMO,WAAWE,MACtB,4BAAKT,EAAMO,WAAWG,UCTTC,EAAU,SAAAX,GAAK,OAE3B,yBAAKC,UAAU,aAEfD,EAAMY,KAAKC,KAAI,SAAAC,GAAI,OAEpB,kBAAC,EAAD,CAAMC,IAAKD,EAAKN,GAAID,WAAYO,SCLlBE,G,MAAU,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,gBAAd,OAGxB,2BAAOC,KAAK,SACZlB,UAAU,SACTmB,YAAaH,EACXI,SAAUH,MC2CEI,E,YA9Cb,aAAc,IAAD,8BACX,+CAiBJC,aAAc,SAAAC,GACZ,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAjBlC,EAAKC,MAAM,CACTC,QAAQ,wDACRC,SAAS,GACTL,YAAY,IALH,E,iFASK,IAAD,OACjBM,MAAM,8CACLC,MAAM,SAAAC,GAAI,OAAGA,EAAKC,UAElBF,MAAK,SAAAnB,GAAI,OAAE,EAAKW,SAAS,CAACM,SAASjB,S,+BAQ3B,IAAD,EACsBsB,KAAKP,MAA3BE,EADA,EACAA,SAASL,EADT,EACSA,YACTW,EAAcN,EAASO,QAC3B,SAAAxB,GAAI,OAAIA,EAAKL,KAAK8B,cAAcC,SAASd,EAAYa,kBAIzD,OACE,yBAAKtC,UAAU,OAGX,wBAAIA,UAAU,SAAd,qDAGL,kBAAC,EAAD,CAAYgB,YAAY,kBAAkBC,gBAAiBkB,KAAKb,eAE7D,kBAAC,EAAD,CAAUX,KAAMyB,S,GAtCJI,aCMEC,QACW,cAA7BtC,OAAOC,SAASsC,UAEe,UAA7BvC,OAAOC,SAASsC,UAEhBvC,OAAOC,SAASsC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.b039bb25.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\n\r\n\r\n\r\nexport const Card= props =>{\r\nreturn <div className='card-container'> \r\n {/* { <img alt='flower' src={`http://lorempixel.com/400/200/fashion/${props.Monstering.id}/`}></img>} */}\r\n{/* { <img alt='flower' src={`https://loremflickr.com/180/180/hollywood/?lock=1${props.Monstering.id}`}></img>} */}\r\n{ <img alt='flower' src={window.location.origin +`/image/image0${props.Monstering.id}.jpg`}></img>}\r\n<h1>{props.Monstering.name}</h1>\r\n<h3>{props.Monstering.email}</h3>\r\n{/* <h4>{props.Monstering.address.city}</h4> */}\r\n</div>;\r\n\r\n}","import React from 'react'//React capital case\r\nimport './card-list.styles.css' // ./ not forgot \r\nimport {Card} from '../card/card.component'\r\nexport const CardList= props =>(\r\n\r\n <div className='card-list'>\r\n\r\n{props.Love.map(item =>(\r\n\r\n<Card key={item.id} Monstering={item}/>\r\n\r\n))}\r\n</div>\r\n//امدیم یک آبجکت انداختیم توی تگ کارت لیست و از اینجا بهره برداری کردیم ازش باز میشه اینو تعمیم داد به تگ های کوچکتر \r\n);\r\n\r\n// () or return {}","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\n\r\n export const SearchBox=({placeHolder,handleSearchBox}) => (\r\n\r\n\r\n<input type='search'\r\nclassName='search'\r\n placeholder={placeHolder} \r\n   onChange={handleSearchBox}\r\n  />\r\n);\r\n\r\n\r\n\r\n\r\n","import React,{Component} from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport { CardList } from './component/card-list/card-list.component';\r\nimport { SearchBox } from './component/search-box/search-box.component';\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      message:\"my world getting little for this resents approach me \",\r\n      monsters:[],\r\n      serachField:\"\"\r\n           \r\n    }\r\n  }\r\ncomponentDidMount(){\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n  .then( data =>data.json())//data=response\r\n  // .then( data =>console.log(data))//data=response\r\n  .then(item=>this.setState({monsters:item}))//item=users best practise\r\n//  this.handleChange=this.handleChange.bind(this);\r\n\r\n}\r\n//handle change put out of render\r\nhandleChange= e => {\r\n  this.setState({serachField:e.target.value});\r\n}\r\n  render(){\r\n    const{monsters,serachField}=this.state;\r\n    const filterMonster=monsters.filter(\r\n      item => item.name.toLowerCase().includes(serachField.toLowerCase())\r\n\r\n    );\r\n \r\n  return (\r\n    <div className=\"App\">\r\n     \r\n\r\n        <h1 className='title'>This is a minature cinema For intersting into Art</h1>\r\n\r\n   \r\n   <SearchBox  placeHolder='Enter your Name' handleSearchBox={this.handleChange} />\r\n   \r\n      <CardList Love={filterMonster} />\r\n  \r\n    \r\n    \r\n    </div>\r\n  );\r\n  \r\n}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}